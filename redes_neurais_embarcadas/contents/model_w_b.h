#include "math.h"

#define EULER_NUMBER_F 2.71828182846

const float dense1[7][7] = {{1.3240143 , -0.31840697,  0.26432708, -0.170552  , -1.8922148 ,-0.05899968,  0.6900924 },
    { 1.4508674 ,  0.27826726, -0.88343847, -0.48425615,  0.11258629,
        1.6229113 , -0.4745939 },
    {-0.08102717, -0.16564067,  2.2056117 , -2.3668678 ,  0.0477605 ,
        -0.19420068, -1.5554687 },
    { 0.47059074, -0.3951145 ,  0.96479934,  0.34289148, -0.23088478,
        0.34827963, -0.33023626},
    {-0.5163081 ,  0.04077391, -0.1316837 ,  0.20626786,  0.3941909 ,
      0.31833133, -0.31305537},
    {-0.5483078 ,  2.0082116 , -0.19061667, -0.042167  ,  0.09923938,
     -0.25113505,  0.20841913},
    {3.071722  , -0.30073652, -0.2745872 ,  0.70215344, -0.02932997,
     -0.6105205 , -0.44473654}
}

bias1[7]= {-1.8424183 , -0.29318032, -0.71793896,  0.58648545,  1.1684448 ,
    -0.06663869, -0.01252564}

const float dense2[7][15] = {{-8.8182193e-01, -1.0403904e+00,  2.3415084e-01, -1.6010859e+00,
    1.2645469e+00,  6.2506342e-01,  1.4403547e-01,  1.3866535e+00,
    -1.3631394e+00, -1.1549077e+00,  6.2532592e-01,  3.6711341e-01,
    3.6094636e-01, -4.0423036e-01, -1.6472607e+00},
    { 2.2592564e+00, -7.4537056e-03, -1.1052014e+00, -1.9010162e+00,
      -1.5255852e+00, -2.0775299e+00, -1.1938664e+00,  1.1282156e+00,
      -2.2300298e+00,  1.7077334e+00, -2.3541206e-01,  2.3477142e+00,
      -1.2656362e+00,  3.9823955e-01,  1.6280038e+00},
    { 2.6601616e-01,  8.8558108e-01,  8.8476729e-01,  2.0135219e+00,
   -1.7190528e+00, -2.7249517e+00, -1.8920913e+00,  9.5007256e-02,
   -1.1763126e+00,  2.0093031e-01,  2.6288581e+00,  7.9570931e-01,
    5.7078987e-01,  6.7440286e-02,  1.7555249e+00},
    { 1.5605330e+00, -1.8069752e+00,  1.4513006e+00, -3.1323419e+00,
   -1.3984157e+00, -2.8448102e-01, -8.9885548e-02, -1.1868129e+00,
   -2.5400877e+00, -1.2993146e+00, -2.9926326e+00, -1.7031716e+00,
    -1.4435673e+00, -1.4369928e+00,  8.7121040e-01},
    {-1.8708549e-01, -1.5405881e+00,  7.0529854e-01, -9.9332476e-01,
    6.3282615e-01,  2.6686537e+00,  1.6351477e+00,  3.7908605e-01,
    1.0611341e+00, -5.7777828e-01,  5.9494144e-01,  4.1036156e-01,
    -1.3772851e-01, -3.1408871e-04, -3.3658093e-01},
    {-7.6806647e-01,  1.9423677e+00, -1.7551746e+00, -3.2502621e-01,
   -1.1923279e+00,  2.0896144e+00,  1.5157335e+00,  2.3474124e-01,
    2.6371927e+00, -2.6559651e-01,  3.6158435e-02, -6.0211086e-01,
    -2.0148480e+00,  1.0581117e+00,  8.6925930e-01},
    {5.3022015e-03,  1.6533217e+00, -2.1324840e+00,  1.9281176e+00,
        -4.8277062e-01, -8.3825767e-01, -5.2536333e-01,  1.9957322e-01,
        -5.3801817e-01,  3.5814458e-01,  7.0273197e-01, -7.9219294e-01,
        5.9400910e-01, -4.2298487e-01, -2.9969935e-05}}

bias2[15] = {-0.41765705, -2.1013281 ,  0.6449566 , -1.5865707 ,  0.3828884 ,
    1.2755029 ,  1.0459787 , -0.46718937,  1.6510935 ,  0.17654623,
   -2.3982701 ,  0.29869524, -0.23163012,  0.21507215, -0.03669479}

const float dense3[15][4] = {{-0.169661  , -0.9432964 ,  2.2407954 ,  3.640507  },
    { 2.2252738 ,  3.584929  ,  0.41630355, -2.2848763 },
    {-2.3046682 , -0.6604323 ,  1.6724895 ,  3.2889733 },
    { 0.46398583,  0.14509733,  1.8828155 , -1.4152206 },
    {-2.5188413 ,  2.7840805 ,  1.6530844 , -0.9777727 },
    {-1.7002476 ,  3.3113062 , -0.25269568,  0.16832277},
    {-1.516568  ,  4.5864987 ,  0.01165627,  1.8925066 },
    { 0.26406053,  0.68159217,  1.9101794 , -7.2901697 },
    {-0.30716997,  0.90490943, -2.0154378 ,  0.35644448},
    {-0.43600607, -4.783684  , -1.6907642 , -3.270353  },
    { 0.8927374 , -2.266153  ,  0.86817235, -4.969726  },
    {-1.2503529 , -1.6388153 ,  1.090578  , -2.9071484 },
    {-0.90229774,  0.16536713,  2.0102785 , -1.4810205 },
    {-1.5117027 , -2.1529202 ,  0.26754463, -1.9151093},
    { 0.76141626, -4.943978  , -1.0107793 ,  2.6612475 }}

bias3[4] = {-1.343224  , -1.2129092 , -0.2890825 ,  0.97111416}


void predict(float m1, float m2, float m3, float m4, float m5, float m6, float m7){
    
      float input[7] = {m1,m2,m3,m4,m5,m6,m7};
      
  
    float n1[7] = {0,0,0,0,0,0,0};
    float n2[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    float n3[4] = {0,0,0,0};
  
    float output[4];

  
    int zeros = 0;
    int uns = 0;
    
    //dense1
    for(int i=0;i<7;i++){
        for(int j=0;j<7;j++){
          if(dense1[i][j] != 0){
            n1[j] += input[i]*dense1[i][j];
          }
        }
       }
  
      //bias1
    for(int i=0;i<7;i++){
      if(bias1[i]!=0){
          n1[i]+=bias1[i];
      }
    }
      
      //tanh
    for(int i=0;i<7;i++){
        n1[i] = tanh(n1[i]);
    }
          
    //dense2
    for(int i=0;i<7;i++){
        for(int j=0;j<15;j++){
          if(dense2[i][j] !=0){
            n2[j] += n1[i]*dense2[i][j];
          }
           }
    }
      
    //bias2
    for(int i=0;i<15;i++){
      if(bias2[i] !=0){
          n2[i]+=bias2[i];
      }
    }
      
    //tanh
    for(int i=0;i<15;i++){
        n2[i] = tanh(n2[i]);
    }
          
    //dense3
    for(int i=0;i<15;i++){
        for(int j=0;j<4;j++){
          if(dense3[i][j] !=0){
            n3[j] += n2[i]*dense3[i][j];
          }
        }
    }
      
      //bias3
    for(int i=0;i<4;i++){
      if(bias3[i] !=0.){
          n3[i]+=bias3[i];
      }
    }
      
    //sigmoid
    float p1 = (1 / (1 + pow(EULER_NUMBER_F, -n3[0])));
    float p2 = (1 / (1 + pow(EULER_NUMBER_F, -n3[1])));
    float p3 = (1 / (1 + pow(EULER_NUMBER_F, -n3[2])));
    float p4 = (1 / (1 + pow(EULER_NUMBER_F, -n3[3])));
  
          
      //arredonda os resultados para ficar 0 ou 1
      int dig1 = roundf(p1);
      int dig2 = roundf(p2);
      int dig3 = roundf(p3);
      int dig4 = roundf(p4);
  
      //imprime o cÃ³digo BCD no Monitor Serial
      //Serial.print(dig1);
      //Serial.print(dig2);
      //Serial.print(dig3);
      //Serial.println(dig4);
  
  
      //acende cada led de acordo com o BCD
      if(dig1 == 1){
          PORTD |= 0b10000000;
    }
      if(dig2 == 1){
          PORTD |= 0b01000000;
    }
      if(dig3 == 1){
          PORTD |= 0b00100000;
    }
      if(dig4 == 1){
          PORTD |= 0b00010000;
    }
          
}



